{"ast":null,"code":"var _objectSpread = require(\"C:\\\\Users\\\\MarvinT\\\\Desktop\\\\stuff\\\\nba-play-viewer-master\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar axios = require('axios');\n\nvar stat_endpoints = require('./endpoint.json');\n\nvar jsonp = require('jsonp');\n\nvar default_options = {\n  formatted: true,\n  parameters: false\n};\n\ngenerateURL = function generateURL(params, endpoint) {\n  var values = _objectSpread({}, stat_endpoints[endpoint].params, params);\n\n  var url = stat_endpoints[endpoint].url + \"?\";\n  var param_names = Object.keys(values);\n\n  for (var i = 0; i < param_names.length; i++) {\n    url = url + param_names[i] + \"=\" + values[param_names[i]] + \"&\";\n  }\n\n  return url;\n};\n\nformatData = function formatData(json, options) {\n  var data = {};\n  var parameters = json.parameters;\n\n  if (options.formatted) {\n    var result_set = json.resultSets;\n\n    for (i in result_set) {\n      var merged = {};\n\n      if (result_set[i].rowSet.length !== 1) {\n        var multipleRowSets = {};\n\n        for (j in result_set[i].rowSet) {\n          var temp = {};\n\n          for (k in result_set[i].headers) {\n            temp[result_set[i].headers[k]] = result_set[i].rowSet[j][k];\n          }\n\n          multipleRowSets[j] = temp;\n        }\n\n        data[result_set[i].name] = multipleRowSets;\n      } else {\n        for (j in result_set[i].headers) {\n          merged[result_set[i].headers[j]] = result_set[i].rowSet[0][j];\n        }\n\n        data[result_set[i].name] = merged;\n      }\n    }\n  } else data = json;\n\n  if (options.parameters) return {\n    data: data,\n    parameters: parameters\n  };else return data;\n};\n\ngetDataFromNBA = function getDataFromNBA(params, endpoint, options) {\n  var headers = {\n    'Host': 'stats.nba.com',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0',\n    'Accept': 'application/json, text/plain, */*',\n    'Accept-Language': 'en-US,en;q=0.5',\n    'Referer': 'https://stats.nba.com/',\n    'Accept-Encoding': 'gzip, deflate, br',\n    'Connection': 'keep-alive',\n    'x-nba-stats-origin': 'stats',\n    'x-nba-stats-token': 'true'\n  };\n  var url = generateURL(params, endpoint);\n  console.log(url);\n  return new Promise(function (resolve, reject) {\n    if (typeof window === 'undefined') {\n      axios.get(url, {\n        headers: headers\n      }).then(function (res) {\n        resolve(formatData(res.data, options));\n      }).catch(function (err) {\n        reject(err);\n      });\n    } else {\n      jsonp(url, null, function (err, data) {\n        if (!err) resolve(formatData(data, options));else reject(err);\n      });\n    }\n  });\n};\n\nmodule.exports = {\n  playByPlay: function playByPlay(params, options) {\n    return getDataFromNBA(params, \"play_by_play\", _objectSpread({}, default_options, options));\n  },\n  getPBPVideoURL: function getPBPVideoURL(vid) {\n    return new Promise(function (resolve, reject) {\n      var url = 'https://stats.nba.com/stats/videoeventsasset?GameEventID=' + vid.EventNum + '&GameID=' + vid.GameID;\n      axios.get(url).then(function (res) {\n        var vidUrl = res.data.resultSets.Meta.videoUrls[0].lurl;\n        resolve(vidUrl);\n      }).catch(function (err) {\n        console.log(err);\n        reject(err);\n      });\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}